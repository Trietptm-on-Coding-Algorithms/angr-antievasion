#!/usr/bin/python

import angr
# python path hack to import package angr_antievasion in sibling directory
import os
rootdir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.sys.path.insert(0, rootdir)
import angr_antievasion
import testing.utilities
import logging

CHECK_TABLE = [
    ('evasive_checks', 0x4020F4),
]


def test():
    logging.getLogger('angr_antievasion').setLevel(logging.INFO)
    logging.getLogger('testing.utilities').setLevel(logging.INFO)
    logging.getLogger('angr.procedures').setLevel(logging.DEBUG)
    # logging.getLogger('angr.procedures.win32').setLevel(logging.INFO)
    # logging.getLogger().setLevel(logging.WARNING)
    # logging.getLogger('angr.project').setLevel(logging.DEBUG)
    # logging.getLogger('angr.analyses.callee_cleanup_finder').setLevel(logging.INFO)
    # logging.getLogger("cle.loader").setLevel(logging.DEBUG)
    # logging.getLogger("angr.procedures.libc.memcmp").setLevel(logging.DEBUG)

    proj = angr.Project('./M4LW4R3', load_options={
        'auto_load_libs': True,
        'use_system_libs': False,
        'case_insensitive': True,
        'custom_ld_path': '../../windows_dlls',
        'except_missing_libs': True,
    })

    # stub out imports
    proj.analyses.CalleeCleanupFinder(hook_all=True)

    # Alternative, expensive but exhaustive way to stub out all imports
    # for obj in proj.loader.all_pe_objects:
    #     # stub out all imports (by stubbing out each module exports)
    #     export_addrs = [x.rebased_addr for x in obj._exports.values() if x.forwarder is None]
    #     proj.analyses.CalleeCleanupFinder(starts=export_addrs, hook_all=True)

    # setup testing utilities
    # symbols for which no SimProcedure is available and/or is better to use the actual implementation
    no_sim_syms = ['_vsnprintf', 'mbstowcs', 'wcsstr', 'lstrcmpiA', 'lstrcmpiW']
    # snprintf is (ab)used by pafish: angr stub returns an empty string so it's useless
    testing.setup(proj, aux_hooks=True, unhook=no_sim_syms)

    # anti-evasion hooks
    angr_antievasion.hook_all(proj)

    # return address for the check call state configuration
    ret_addr = proj.loader.extern_object.allocate()

    # import IPython; IPython.embed()

    for check_name, check_addr in CHECK_TABLE:
        print '\n### {} check @ {} ###'.format(check_name, hex(check_addr))

        call_state_extended = proj.factory.call_state(check_addr, ret_addr=ret_addr)

        simgr = proj.factory.simulation_manager(call_state_extended, save_unconstrained=True)

        print '\n! Instrumented exploration !'

        while len(simgr.active) > 0:
            simgr.explore(find=ret_addr)

        print simgr

        import IPython; IPython.embed()


if __name__ == '__main__':
    test()
